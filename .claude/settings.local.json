{
  "permissions": {
    "allow": [
      "Bash(dir /A .env*)",
      "Bash(ls:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(rm:*)",
      "Bash(npm run build:*)",
      "Bash(npm start)",
      "Bash(dir:*)",
      "Bash(find:*)",
      "Bash(npx tsc:*)",
      "Bash(node:*)",
      "Bash(npm run migrate:status:*)",
      "Bash(npm run dev:*)",
      "WebFetch(domain:support.cloudinary.com)",
      "WebFetch(domain:cloudinary.com)",
      "Bash(npm run start:*)",
      "Bash(echo \"\n-- Test manual dell''aggiornamento schema\nALTER TABLE team_members ADD COLUMN IF NOT EXISTS image_public_id VARCHAR(255) NULL;\nALTER TABLE team_members ADD COLUMN IF NOT EXISTS image_upload_date TIMESTAMPTZ NULL;\n\n-- Verifica se i campi esistono\nSELECT column_name, data_type \nFROM information_schema.columns \nWHERE table_name = ''team_members'' \nAND column_name IN (''profile_image_url'', ''image_public_id'', ''image_upload_date'');\n\")",
      "Bash(timeout 60 npm run build)",
      "Bash(timeout 10 npm run build)",
      "Bash(timeout 30 npm run build)",
      "Bash(timeout 15 npm start)",
      "Bash(timeout 15 npm run build --prefix client)",
      "Bash(timeout 10 npm run build:*)",
      "Bash(timeout 30 npm run build --prefix client)",
      "Bash(npm install)",
      "Bash(timeout 15 npm run build)",
      "Bash(curl:*)",
      "Bash(grep:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(timeout 10 npm start)",
      "Bash(timeout 30 npx tsc --noEmit --target es5 src/hooks/useJobs.ts)",
      "Bash(timeout 30 npx tsc --noEmit --target es5 client/src/hooks/useJobs.ts)",
      "Bash(cp:*)",
      "Bash(timeout 30 npx tsc --noEmit --target es5 client/src/components/common/EmergencyButton.tsx)",
      "Bash(timeout 30 npx tsc --noEmit)",
      "Bash(timeout 30 npx tsc --noEmit --target es5 client/src/pages/MessagesManagement.tsx)",
      "Bash(npm run:*)",
      "Bash(timeout 60 npx react-scripts build)",
      "Bash(git rm:*)",
      "Bash(git filter-branch:*)",
      "Bash(git log:*)"
    ],
    "deny": []
  }
}